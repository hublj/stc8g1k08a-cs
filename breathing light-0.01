#include <stc8g.h>

// 定义呼吸灯引脚
sbit LED = P3^3;

// 全局变量，使用double类型来更精确地表示小数，可精确到小数点后多位
double pwm_duty_cycle = 0;  // PWM占空比，范围0 - 100，代表0% - 100%
double fade_step = 0.05;    // 占空比每次变化的步长，可调整以改变渐变速度，精确到小数点后两位
int fade_direction = 1;     // 1表示占空比增加（渐亮），-1表示占空比减小（渐暗）

// 配置P3.3引脚为强推挽输出模式
void port_init(void)
{
    P3M1 &= ~(1 << 3);
    P3M0 |= (1 << 3);
}

// 定时器0初始化函数，用于产生定时中断来控制呼吸灯变化
// 假设晶振频率为24MHz，设置初值实现大概1ms的定时中断（可根据实际晶振频率调整）
void timer0_init(void)
{
    AUXR &= 0x7F;  // 定时器0工作在12T模式
    TMOD &= 0xF0;
    TMOD |= 0x01;  // 定时器0工作在方式1（16位定时器/计数器）
    TL0 = 0x66;    // 初始值设置，实现大概1ms的定时中断（基于24MHz晶振频率）
    TH0 = 0xFC;
    TF0 = 0;
    TR0 = 1;      // 启动定时器0
    ET0 = 1;      // 允许定时器0中断
    EA = 1;       // 开启总中断
}

// 定时器0中断服务函数，在中断中改变PWM占空比来实现呼吸灯效果
void timer0_isr() interrupt 1
{
    TL0 = 0x66;
    TH0 = 0xFC;

    if (fade_direction == 1)  // 渐亮过程
    {
        pwm_duty_cycle += fade_step;
        if (pwm_duty_cycle >= 100)  // 达到最亮，开始渐暗
        {
            fade_direction = -1;
            pwm_duty_cycle = 100;
        }
    }
    else  // 渐暗过程
    {
        pwm_duty_cycle -= fade_step;
        if (pwm_duty_cycle <= 0)  // 达到最暗，开始渐亮
        {
            fade_direction = 1;
            pwm_duty_cycle = 0;
        }
    }

    if ((int)pwm_duty_cycle < 100 * (LED == 1))  // 根据占空比控制LED亮灭，需将double转为int比较
    {
        LED = 0;
    }
    else
    {
        LED = 1;
    }
}

void main()
{
    port_init();    // 初始化端口，设置P3.3为强推挽模式
    timer0_init();  // 初始化定时器0
    while (1)
    {
        // 主循环可以添加其他代码，这里暂为空循环，呼吸灯效果主要由定时器中断控制
    }
}