#include <STC8G.h>

// 延时函数
void delay(unsigned int ms) {
    unsigned int i, j;
    for (i = 0; i < ms; i++) {
        for (j = 0; j < 123; j++); // 调整此值以改变延时时间
    }
}

// 初始化GPIO
void GPIO_Init(void) {
    // 设置P5.4为输入模式，启用内部4kΩ上拉电阻
    P5M1 &= ~(1 << 4); // 清除P5.4的P5M1位
    P5M0 |= (1 << 4);  // 设置P5.4的P5M0位，启用内部4kΩ上拉电阻

    // 设置P3.3为输出模式
    P3M1 &= ~(1 << 3); // 清除P3.3的P3M1位
    P3M0 &= ~(1 << 3); // 清除P3.3的P3M0位，设置为推挽输出模式

    P33 = 0; // 默认设置P3.3为低电平，继电器关闭
}

// 控制继电器开
void Relay_On(void) {
    P33 = 1; // 设置P3.3为高电平，继电器开启
}

// 控制继电器关
void Relay_Off(void) {
    P33 = 0; // 设置P3.3为低电平，继电器关闭
}

// 继电器状态标志
unsigned char relay_state = 0; // 继电器状态标志，0表示关闭，1表示开启

// 最小状态保持时间（单位：毫秒）
#define MIN_HOLD_TIME 1000 // 1秒

// 记录上次状态变化的时间
unsigned long last_change_time = 0;

// 获取当前时间（单位：毫秒）
unsigned long get_current_time() {
    static unsigned long timer = 0;
    static unsigned char tick = 0;
    if (++tick >= 1000) {
        tick = 0;
        timer++;
    }
    return timer * 1000 + tick;
}

// 新增变量用于记录状态变化次数和锁定时间
unsigned char sensor_change_count = 0;
unsigned long lock_time = 0;

// 检查光电开关状态并控制继电器
void Check_Sensor(void) {
    static unsigned char last_sensor_state = 1; // 上一次的传感器状态，默认为未触发
    unsigned char current_sensor_state;          // 当前传感器状态
    unsigned char temp_state;

    // 获取当前传感器状态
    current_sensor_state = (P5 & (1 << 4))? 1 : 0;

    // 如果传感器状态发生变化，则进行消抖处理
    if (current_sensor_state!= last_sensor_state) {
        // 多次采样判断
        unsigned char i;
        unsigned char sample_count = 0;
        for (i = 0; i < 5; i++) {
            delay(10);
            temp_state = (P5 & (1 << 4))? 1 : 0;
            if (temp_state == current_sensor_state) {
                sample_count++;
            }
        }
        if (sample_count >= 3) {
            // 再次获取当前传感器状态，确保状态变化是真实的
            current_sensor_state = (P5 & (1 << 4))? 1 : 0;

            // 如果状态确实变化了，并且距离上次状态变化时间超过最小保持时间
            // 同时检查是否不在锁定时间内
            if (current_sensor_state!= last_sensor_state &&
                (get_current_time() - last_change_time) > MIN_HOLD_TIME &&
                get_current_time() - lock_time > 5000) {
                if (current_sensor_state == 0 &&!relay_state) { // 光电开关被遮挡且继电器关闭
                    Relay_On();         // 开启继电器
                    relay_state = 1;    // 更新继电器状态
                } else if (current_sensor_state == 0 && relay_state) { // 光电开关被遮挡且继电器开启
                    Relay_Off();        // 关闭继电器
                    relay_state = 0;    // 更新继电器状态
                }

                // 更新上次传感器状态和状态变化时间
                last_sensor_state = current_sensor_state;
                last_change_time = get_current_time();
                sensor_change_count++;
                if (sensor_change_count >= 3 && get_current_time() - last_change_time < 1000) {
                    // 1秒内状态变化3次则锁定继电器状态
                    lock_time = get_current_time();
                    sensor_change_count = 0;
                }
            }
        }
    }
}

// 主函数
void main(void) {
    GPIO_Init(); // 初始化GPIO

    while (1) {
        Check_Sensor(); // 检查光电开关状态
    }
}
