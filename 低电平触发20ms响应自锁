#include <STC8G.h>

// 延时函数
void delay(unsigned int ms) {
    unsigned int i, j;
    for (i = 0; i < ms; i++) {
        for (j = 0; j < 123; j++); // 调整此值以改变延时时间
    }
}

// 初始化GPIO
void GPIO_Init(void) {
    // 设置P5.4为输入模式，启用内部4kΩ上拉电阻
    P5M1 &= ~(1 << 4); // 清除P5.4的P5M1位
    P5M0 |= (1 << 4);  // 设置P5.4的P5M0位，启用内部4kΩ上拉电阻

    // 设置P3.3为输出模式
    P3M1 &= ~(1 << 3); // 清除P3.3的P3M1位
    P3M0 &= ~(1 << 3); // 清除P3.3的P3M0位，设置为推挽输出模式

    P33 = 0; // 默认设置P3.3为低电平，继电器关闭
}

// 控制继电器开
void Relay_On(void) {
    P33 = 1; // 设置P3.3为高电平，继电器开启
}

// 控制继电器关
void Relay_Off(void) {
    P33 = 0; // 设置P3.3为低电平，继电器关闭
}

// 继电器状态标志
bit relay_state = 0; // 继电器状态标志，0表示关闭，1表示开启

// 检查光电开关状态并控制继电器
void Check_Sensor(void) {
    static bit last_sensor_state = 1; // 上一次的传感器状态，默认为未触发
    bit current_sensor_state;          // 当前传感器状态

    // 获取当前传感器状态
    current_sensor_state = (P5 & (1 << 4)) ? 1 : 0;

    // 如果传感器状态发生变化，则进行消抖处理
    if (current_sensor_state != last_sensor_state) {
        delay(20); // 延时20ms以消除抖动

        // 再次获取当前传感器状态，确保状态变化是真实的
        current_sensor_state = (P5 & (1 << 4)) ? 1 : 0;

        // 如果状态确实变化了，则根据继电器状态决定操作
        if (current_sensor_state != last_sensor_state) {
            if (current_sensor_state == 0 && !relay_state) { // 光电开关被遮挡且继电器关闭
                Relay_On();         // 开启继电器
                relay_state = 1;    // 更新继电器状态
            } else if (current_sensor_state == 0 && relay_state) { // 光电开关被遮挡且继电器开启
                Relay_Off();        // 关闭继电器
                relay_state = 0;    // 更新继电器状态
            }

            // 更新上次传感器状态
            last_sensor_state = current_sensor_state;
        }
    }
}

// 主函数
void main(void) {
    GPIO_Init(); // 初始化GPIO
    
    while (1) {
        Check_Sensor(); // 检查光电开关状态
    }
}
