#include <STC8G.h>


/*

以下是与之前代码相比修改的地方：
 
 GPIO_Init 函数修改点
 
- 引脚输入模式配置更改：
- 之前代码对于P5.4引脚是设置为启用内部4kΩ上拉电阻的输入模式，通过“ P5M1 &= ~(1 << 4); （清除P5M1位）和 P5M0 |= (1 << 4); （设置P5M0位）”操作来实现，也就是默认引脚为高电平（上拉状态），光电开关触发是拉低电平来检测。
- 现在修改为适合高电平输入模式有效的配置，示例中采用浮空输入模式（具体可按需按芯片手册优化），通过“ P5M1 &= ~(1 << 4); （清除P5M1位）和 P5M0 &= ~(1 << 4); （清除P5M0位）”操作来将P5.4设为浮空输入，等待外部高电平信号输入作为有效触发。
 
 Check_Sensor 函数修改点
 
- 状态判断逻辑调整：
- 之前代码判断光电开关被遮挡（对应引脚变为低电平）来进行继电器相关操作，比如在 if (current_sensor_state == 0 &&!relay_state) 等条件判断里以低电平（ current_sensor_state == 0 ）作为触发条件来决定继电器的开或关。
- 现在改为高电平输入模式有效后，在条件判断里变为以高电平（ current_sensor_state == 1 ）作为触发条件了，像在 if (current_sensor_state == 1 &&!relay_state) 等语句处，根据光电开关引脚变为高电平且结合继电器当前状态来决定是开启还是关闭继电器，以此适配新的输入模式下的控制逻辑。
 
总的来说，代码修改主要围绕将光电开关对应的引脚输入模式改为高电平有效相关配置及调整相应的控制逻辑判断条件，使其能按照高电平输入有效的方式来正确控制继电器工作。

*/


//11.0592MHZ烧录，20MS检测，快速检测

// 延时函数
void delay(unsigned int ms) {
    unsigned int i, j;
    for (i = 0; i < ms; i++) {
        for (j = 0; j < 123; j++); // 调整此值以改变延时时间
    }
}

// 初始化GPIO
void GPIO_Init(void) {
    // 设置P5.4为输入模式，高电平输入模式有效（这里原先是上拉电阻模式，现修改为浮空输入等适合高电平有效的模式，具体根据芯片手册可进一步优化）
    P5M1 &= ~(1 << 4); // 清除P5.4的P5M1位
    P5M0 &= ~(1 << 4);  // 清除P5.4的P5M0位，设置为浮空输入模式（示例，可按需调整为更合适的高电平检测输入模式）

    // 设置P3.3为输出模式
    P3M1 &= ~(1 << 3); // 清除P3.3的P3M1位
    P3M0 &= ~(1 << 3); // 清除P3.3的P3M0位，设置为推挽输出模式

    P33 = 0; // 默认设置P3.3为低电平，继电器关闭
}

// 控制继电器开
void Relay_On(void) {
    P33 = 1; // 设置P3.3为高电平，继电器开启
}

// 控制继电器关
void Relay_Off(void) {
    P33 = 0; // 设置P3.3为低电平，继电器关闭
}

// 继电器状态标志
bit relay_state = 0; // 继电器状态标志，0表示关闭，1表示开启

// 检查光电开关状态并控制继电器
void Check_Sensor(void) {
    static bit last_sensor_state = 0; // 上一次的传感器状态，默认为未触发（低电平，对应高电平有效模式下初始为未触发）
    bit current_sensor_state;          // 当前传感器状态

    // 获取当前传感器状态
    current_sensor_state = (P5 & (1 << 4))? 1 : 0;

    // 如果传感器状态发生变化，则进行消抖处理
    if (current_sensor_state!= last_sensor_state) {
        delay(20); // 延时20ms以消除抖动

        // 再次获取当前传感器状态，确保状态变化是真实的
        current_sensor_state = (P5 & (1 << 4))? 1 : 0;

        // 如果状态确实变化了，则根据继电器状态决定操作
        if (current_sensor_state!= last_sensor_state) {
            if (current_sensor_state == 1 &&!relay_state) { // 光电开关变为高电平（触发）且继电器关闭
                Relay_On();         // 开启继电器
                relay_state = 1;    // 更新继电器状态
            } else if (current_sensor_state == 1 && relay_state) { // 光电开关变为高电平（触发）且继电器开启
                Relay_Off();        // 关闭继电器
                relay_state = 0;    // 更新继电器状态
            }

            // 更新上次传感器状态
            last_sensor_state = current_sensor_state;
        }
    }
}

// 主函数
void main(void) {
    GPIO_Init(); // 初始化GPIO

    while (1) {
        Check_Sensor(); // 检查光电开关状态
    }
}
