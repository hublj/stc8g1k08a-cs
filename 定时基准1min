#include <stc8g.h>

// 定义P3.3为输出引脚
sbit LED = P3^3;

// 定义定时器溢出次数，24MHz时钟下，定时器初始值和溢出次数计算
#define TIMER_OVERFLOW_TIMES  6000  // 50ms溢出一次，1分钟

volatile unsigned long overflow_count = 0;  // 溢出计数，使用unsigned long以避免溢出

// 定时器初始化函数
void Timer0_Init() {
    TMOD &= 0xF0;  // 清除定时器0模式位
    TMOD |= 0x01;  // 设置定时器0为模式1（16位定时器/计数器）
    TH0 = 0xB1;    // 设置定时器0初值，定时50ms
    TL0 = 0xE0;
    ET0 = 1;       // 开启定时器0中断
    EA = 1;        // 开启全局中断
    TR0 = 1;       // 启动定时器0
}

// 定时器0中断服务程序
void Timer0_ISR() interrupt 1 {
    TH0 = 0xB1;    // 重新加载定时器0初值
    TL0 = 0xE0;
    overflow_count++;  // 溢出计数加1
    if (overflow_count >= TIMER_OVERFLOW_TIMES) {  // 5分钟
        overflow_count = 0;  // 重置溢出计数
        LED = !LED;  // 切换LED状态
    }
}

void Port_Init() {
    P3M1 = 0x00;  // 设置P3口为推挽输出
    P3M0 = 0xFF;  // 设置P3口为强推挽输出
    LED = 0;      // 初始化LED为低电平
}

void main() {
    Port_Init();  // 初始化端口
    Timer0_Init();  // 初始化定时器

    while(1) {
        // 主循环中不需要做任何事情，所有工作由定时器中断完成
    }
}
