#include <stc8g.h>

// 定义P3.3为输出引脚（可根据实际情况是否用于指示定时状态等）
sbit LED = P3 ^ 3;

// 1分钟对应的定时器溢出次数（10毫秒为一次溢出，1分钟即60000毫秒，需要6000次溢出）
#define MINUTE_OVERFLOW_TIMES  6000  
// 定时器溢出次数计数变量
volatile unsigned long overflow_count = 0;  

// 定时器初始化函数，配置定时器0使其能以10毫秒为基准定时，基于11.0592MHz系统时钟频率
void Timer0_Init(void)        //10毫秒@11.0592MHz
{
    AUXR &= 0x7F;            // 定时器时钟12T模式，使定时器计数频率为系统时钟频率的1/12
    TMOD &= 0xF0;            // 先清除TMOD低4位，清除定时器0旧的模式设置
    TMOD |= 0x01;            // 设置定时器0为模式1（16位定时器/计数器）
    TL0 = 0x00;              // 设置定时初始值，对应定时10毫秒初值
    TH0 = 0xDC;              // 设置定时初始值
    TF0 = 0;                 // 清除TF0标志，避免初始化后立即误触发中断
    TR0 = 1;                 // 启动定时器0开始计时
    ET0 = 1;                 // 使能定时器0中断，允许定时器0溢出时触发中断
    EA = 1;                  // 开启全局中断，作为总开关使能所有已使能的中断源
}

// 定时器0中断服务程序
void Timer0_ISR() interrupt 1 {
    TH0 = 0xDC;    // 重新加载定时器0初值
    TL0 = 0x00;
    overflow_count++;  // 溢出计数加1
    if (overflow_count >= MINUTE_OVERFLOW_TIMES) {  // 判断是否达到1分钟对应的溢出次数
        overflow_count = 0;  // 重置溢出计数
        LED =!LED;  // 可用于指示定时到了（比如闪烁一下LED等，根据实际需求）
    }
}

void Port_Init() {
    P3M1 = 0x00;  // 设置P3口为推挽输出
    P3M0 = 0xFF;  // 设置P3口为强推挽输出
    LED = 0;      // 初始化LED为低电平
}

void main() {
    Port_Init();  // 初始化端口
    Timer0_Init();  // 初始化定时器

    while(1) {
        // 主循环中不需要做任何事情，所有工作由定时器中断完成
    }
}
